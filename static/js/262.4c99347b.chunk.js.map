{"version":3,"file":"static/js/262.4c99347b.chunk.js","mappings":"AAoIAA,UAAaC,IACX,MAAM,GAAEC,EAAE,OAAEC,EAAM,QAAEC,GAAYH,EAAEI,KAElC,IACE,IAAIC,EAEJ,OAAQH,GACN,IAAK,cACHG,EA0CR,SAA2BD,EAAME,GAC/B,MAAMC,EAbR,SAAwBC,EAAKF,GAC3B,IACE,OAAOA,EAAKG,QAAO,CAACC,EAAKC,KACvB,GAAW,MAAPD,EACJ,OAAOA,EAAIC,EAAI,GACdH,EACL,CAAE,MAAOR,GACP,MACF,CACF,CAIgBY,CAAeR,EAAME,GAEnC,OAAc,OAAVC,EACK,CAAEM,KAAM,OAAQN,MAAO,WAGlBO,IAAVP,EACK,CAAEM,KAAM,aAGbE,MAAMC,QAAQT,GACT,CAAEM,KAAM,QAASI,OAAQV,EAAMU,QAGnB,kBAAVV,EACF,CAAEM,KAAM,SAAUI,OAAQC,OAAOC,KAAKZ,GAAOU,QAG/C,CAAEJ,KAAM,YAAaN,QAC9B,CA9DiBa,CAAkBjB,EAAQC,KAAMD,EAAQG,MACjD,MAEF,IAAK,SAKL,IAAK,cAKL,IAAK,YAEHD,EAAS,CAAEQ,KAAM,mBACjB,MAEF,QACE,MAAM,IAAIQ,MAAM,mBAAmBnB,KAGvCoB,YAAY,CAAErB,KAAII,UAEpB,CAAE,MAAOkB,GACPD,YAAY,CAAErB,KAAIuB,MAAOD,EAAIE,SAC/B","sources":["utils/worker.js"],"sourcesContent":["// /* JSON Preview Worker\n//  * Handles CPU-intensive operations off the main thread\n//  */\n\n// // Process search through JSON data\n// function searchData(data, searchTerm, caseSensitive) {\n//   const results = [];\n//   const searchTermLower = caseSensitive ? searchTerm : searchTerm.toLowerCase();\n  \n//   function traverse(obj, path = []) {\n//     if (Array.isArray(obj)) {\n//       obj.forEach((item, index) => {\n//         traverse(item, [...path, index]);\n//       });\n//     } else if (obj && typeof obj === 'object') {\n//       Object.entries(obj).forEach(([key, value]) => {\n//         const keyMatch = caseSensitive \n//           ? key.includes(searchTerm)\n//           : key.toLowerCase().includes(searchTermLower);\n          \n//         if (keyMatch) {\n//           results.push([...path, key]);\n//         }\n        \n//         traverse(value, [...path, key]);\n//       });\n//     } else {\n//       // Primitive value\n//       const stringValue = String(obj);\n//       const valueMatch = caseSensitive \n//         ? stringValue.includes(searchTerm) \n//         : stringValue.toLowerCase().includes(searchTermLower);\n        \n//       if (valueMatch) {\n//         results.push(path);\n//       }\n//     }\n//   }\n  \n//   traverse(data);\n//   return results;\n// }\n\n// // Process collapse all nodes in data\n// function collapseAllNodes(data) {\n//   const collapsedState = {};\n  \n//   function traverse(obj, path = '') {\n//     if (Array.isArray(obj)) {\n//       collapsedState[path] = true;\n//       obj.forEach((item, index) => {\n//         if (typeof item === 'object' && item !== null) {\n//           traverse(item, path ? `${path}.${index}` : `${index}`);\n//         }\n//       });\n//     } else if (obj && typeof obj === 'object') {\n//       collapsedState[path] = true;\n//       Object.entries(obj).forEach(([key, value]) => {\n//         if (typeof value === 'object' && value !== null) {\n//           traverse(value, path ? `${path}.${key}` : key);\n//         }\n//       });\n//     }\n//   }\n  \n//   traverse(data);\n//   return collapsedState;\n// }\n\n// // Process expand all nodes\n// function expandAllNodes() {\n//   return {};\n// }\n\n// // Get node type and related information\n// function getNodeInfo(data, path) {\n//   if (!path || path.length === 0) {\n//     return null;\n//   }\n\n//   try {\n//     const value = path.reduce((acc, key) => (acc ? acc[key] : undefined), data);\n//     const isArray = Array.isArray(value);\n//     const isObject = value && typeof value === 'object' && !isArray;\n    \n//     const type = isArray ? 'array' : isObject ? 'object' : 'primitive';\n//     const length = isArray ? value.length : isObject ? Object.keys(value).length : null;\n    \n//     return {\n//       type,\n//       length,\n//       value: type === 'primitive' ? value : null\n//     };\n//   } catch (error) {\n//     return {\n//       type: 'error',\n//       error: error.message\n//     };\n//   }\n// }\n\n// // Message handler\n// onmessage = function(e) {\n//   const { id, action, payload } = e.data;\n  \n//   let result;\n//   try {\n//     switch (action) {\n//       case 'search':\n//         result = searchData(payload.data, payload.searchTerm, payload.caseSensitive);\n//         break;\n//       case 'collapseAll':\n//         result = collapseAllNodes(payload.data);\n//         break;\n//       case 'expandAll':\n//         result = expandAllNodes();\n//         break;\n//       case 'getNodeInfo':\n//         result = getNodeInfo(payload.data, payload.path);\n//         break;\n//       default:\n//         throw new Error(`Unknown action: ${action}`);\n//     }\n    \n//     postMessage({ id, result });\n//   } catch (error) {\n//     postMessage({ id, error: error.message });\n//   }\n// };\n\n\n\nonmessage = (e) => {\n  const { id, action, payload } = e.data;\n\n  try {\n    let result;\n\n    switch (action) {\n      case 'getNodeInfo':\n        result = handleGetNodeInfo(payload.data, payload.path);\n        break;\n\n      case 'search':\n        // stub: implement if needed\n        result = { type: 'not_implemented' };\n        break;\n\n      case 'collapseAll':\n        // stub\n        result = { type: 'not_implemented' };\n        break;\n\n      case 'expandAll':\n        // stub\n        result = { type: 'not_implemented' };\n        break;\n\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n\n    postMessage({ id, result });\n\n  } catch (err) {\n    postMessage({ id, error: err.message });\n  }\n};\n\n// Helper: Navigate to the value at the given path\nfunction getValueAtPath(obj, path) {\n  try {\n    return path.reduce((acc, key) => {\n      if (acc == null) return undefined;\n      return acc[key];\n    }, obj);\n  } catch (e) {\n    return undefined;\n  }\n}\n\n// Handler for getNodeInfo\nfunction handleGetNodeInfo(data, path) {\n  const value = getValueAtPath(data, path);\n\n  if (value === null) {\n    return { type: 'null', value: null };\n  }\n\n  if (value === undefined) {\n    return { type: 'undefined' };\n  }\n\n  if (Array.isArray(value)) {\n    return { type: 'array', length: value.length };\n  }\n\n  if (typeof value === 'object') {\n    return { type: 'object', length: Object.keys(value).length };\n  }\n\n  return { type: 'primitive', value };\n}\n"],"names":["onmessage","e","id","action","payload","data","result","path","value","obj","reduce","acc","key","getValueAtPath","type","undefined","Array","isArray","length","Object","keys","handleGetNodeInfo","Error","postMessage","err","error","message"],"sourceRoot":""}